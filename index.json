{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | TaskMaster API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | TaskMaster API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes RegistrationTaskMaster Registration extension methods"
  },
  "api/Microsoft.Extensions.DependencyInjection.RegistrationTaskMaster.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.RegistrationTaskMaster.html",
    "title": "Class RegistrationTaskMaster | TaskMaster API Reference",
    "keywords": "Class RegistrationTaskMaster Registration extension methods Inheritance object RegistrationTaskMaster Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: TaskMaster.dll Syntax public static class RegistrationTaskMaster Methods | Improve this Doc View Source RegisterTaskMaster(ICanisterConfiguration?) Registers the library with the bootstrapper. Declaration public static ICanisterConfiguration? RegisterTaskMaster(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The bootstrapper"
  },
  "api/TaskMaster.Commands.html": {
    "href": "api/TaskMaster.Commands.html",
    "title": "Namespace TaskMaster.Commands | TaskMaster API Reference",
    "keywords": "Namespace TaskMaster.Commands Classes RunTask Runs a specific task TaskListing Task listing TaskName Task name input Structs LastRunInfo Last run info"
  },
  "api/TaskMaster.Commands.LastRunInfo.html": {
    "href": "api/TaskMaster.Commands.LastRunInfo.html",
    "title": "Struct LastRunInfo | TaskMaster API Reference",
    "keywords": "Struct LastRunInfo Last run info Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TaskMaster.Commands Assembly: TaskMaster.dll Syntax public struct LastRunInfo Properties | Improve this Doc View Source LastRunEnd Gets or sets the last run end. Declaration public DateTime LastRunEnd { readonly get; set; } Property Value Type Description DateTime The last run end. | Improve this Doc View Source LastRunStart Gets or sets the last run start. Declaration public DateTime LastRunStart { readonly get; set; } Property Value Type Description DateTime The last run start. | Improve this Doc View Source MinValue Gets the minimum value. Declaration public static LastRunInfo MinValue { get; } Property Value Type Description LastRunInfo The minimum value."
  },
  "api/TaskMaster.Commands.RunTask.html": {
    "href": "api/TaskMaster.Commands.RunTask.html",
    "title": "Class RunTask | TaskMaster API Reference",
    "keywords": "Class RunTask Runs a specific task Inheritance object CommandBaseClass<TaskName> RunTask Implements ICommand<TaskName> ICommand Inherited Members CommandBaseClass<TaskName>.CanRun(string) CommandBaseClass<TaskName>.CreateInput() CommandBaseClass<TaskName>.Run(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskMaster.Commands Assembly: TaskMaster.dll Syntax public class RunTask : CommandBaseClass<TaskName>, ICommand<TaskName>, ICommand Properties | Improve this Doc View Source Aliases Gets the aliases. Declaration public override string[] Aliases { get; } Property Value Type Description string[] The aliases. Overrides Monarch.Commands.BaseClasses.CommandBaseClass<TaskMaster.Commands.TaskName>.Aliases See Also CommandBaseClass<TInput> | Improve this Doc View Source Description Gets the description. Declaration public override string Description { get; } Property Value Type Description string The description. Overrides Monarch.Commands.BaseClasses.CommandBaseClass<TaskMaster.Commands.TaskName>.Description See Also CommandBaseClass<TInput> | Improve this Doc View Source Name Gets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides Monarch.Commands.BaseClasses.CommandBaseClass<TaskMaster.Commands.TaskName>.Name See Also CommandBaseClass<TInput> Methods | Improve this Doc View Source Run(TaskName) Runs the specified input. Declaration protected override Task<int> Run(TaskName input) Parameters Type Name Description TaskName input The input. Returns Type Description Task<int> The result. Overrides CommandBaseClass<TaskName>.Run(TaskName) See Also CommandBaseClass<TInput> Implements ICommand<TInput> ICommand See Also CommandBaseClass<TInput>"
  },
  "api/TaskMaster.Commands.TaskListing.html": {
    "href": "api/TaskMaster.Commands.TaskListing.html",
    "title": "Class TaskListing | TaskMaster API Reference",
    "keywords": "Class TaskListing Task listing Inheritance object TaskListing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: TaskMaster.Commands Assembly: TaskMaster.dll Syntax public class TaskListing Methods | Improve this Doc View Source ToString() Converts to string. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString()"
  },
  "api/TaskMaster.Commands.TaskName.html": {
    "href": "api/TaskMaster.Commands.TaskName.html",
    "title": "Class TaskName | TaskMaster API Reference",
    "keywords": "Class TaskName Task name input Inheritance object TaskName Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskMaster.Commands Assembly: TaskMaster.dll Syntax public class TaskName Properties | Improve this Doc View Source Name Gets or sets the name. Declaration [DynamicDisplay(typeof(TaskListing))] public string? Name { get; set; } Property Value Type Description string The name."
  },
  "api/TaskMaster.DataManager.DefaultDataManager.html": {
    "href": "api/TaskMaster.DataManager.DefaultDataManager.html",
    "title": "Class DefaultDataManager | TaskMaster API Reference",
    "keywords": "Class DefaultDataManager Default data manager Inheritance object SimpleFileStore DefaultDataManager Implements IDataManager Inherited Members SimpleFileStore.Location SimpleFileStore.SerialBox SimpleFileStore.GetData(ITask) SimpleFileStore.GetLastRun(ITask) SimpleFileStore.SetData(ITask, dynamic) SimpleFileStore.SetLastRun(ITask, LastRunInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskMaster.DataManager Assembly: TaskMaster.dll Syntax public class DefaultDataManager : SimpleFileStore, IDataManager Constructors | Improve this Doc View Source DefaultDataManager(SerialBox) Initializes a new instance of the DefaultDataManager class. Declaration public DefaultDataManager(SerialBox serialBox) Parameters Type Name Description SerialBox serialBox The serial box. See Also SimpleFileStore Implements IDataManager See Also SimpleFileStore"
  },
  "api/TaskMaster.DataManager.html": {
    "href": "api/TaskMaster.DataManager.html",
    "title": "Namespace TaskMaster.DataManager | TaskMaster API Reference",
    "keywords": "Namespace TaskMaster.DataManager Classes DefaultDataManager Default data manager SimpleFileStore Simple file store."
  },
  "api/TaskMaster.DataManager.SimpleFileStore.html": {
    "href": "api/TaskMaster.DataManager.SimpleFileStore.html",
    "title": "Class SimpleFileStore | TaskMaster API Reference",
    "keywords": "Class SimpleFileStore Simple file store. Inheritance object SimpleFileStore DefaultDataManager Implements IDataManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskMaster.DataManager Assembly: TaskMaster.dll Syntax public abstract class SimpleFileStore : IDataManager Constructors | Improve this Doc View Source SimpleFileStore(string, SerialBox) Initializes a new instance of the SimpleFileStore class. Declaration protected SimpleFileStore(string location, SerialBox serialBox) Parameters Type Name Description string location The location to save to. SerialBox serialBox The serial box. See Also IDataManager Properties | Improve this Doc View Source Location Gets the location. Declaration public string Location { get; } Property Value Type Description string The location. See Also IDataManager | Improve this Doc View Source SerialBox Gets the serial box. Declaration public SerialBox SerialBox { get; } Property Value Type Description SerialBox The serial box. See Also IDataManager Methods | Improve this Doc View Source GetData(ITask) Gets the data. Declaration public dynamic? GetData(ITask task) Parameters Type Name Description ITask task The task. Returns Type Description dynamic The data associated with the task See Also IDataManager | Improve this Doc View Source GetLastRun(ITask) Gets the last run date/time. Declaration public LastRunInfo GetLastRun(ITask task) Parameters Type Name Description ITask task The task. Returns Type Description LastRunInfo The last run date/time. See Also IDataManager | Improve this Doc View Source SetData(ITask, dynamic) Sets the data. Declaration public bool SetData(ITask task, dynamic data) Parameters Type Name Description ITask task The task. dynamic data The data. Returns Type Description bool True if it is saved properly, false otherwise. See Also IDataManager | Improve this Doc View Source SetLastRun(ITask, LastRunInfo) Sets the last run date/time. Declaration public bool SetLastRun(ITask task, LastRunInfo time) Parameters Type Name Description ITask task The task. LastRunInfo time The last run date/time. Returns Type Description bool True if it succeeds, false otherwise. See Also IDataManager Implements IDataManager See Also IDataManager"
  },
  "api/TaskMaster.Frequency.html": {
    "href": "api/TaskMaster.Frequency.html",
    "title": "Namespace TaskMaster.Frequency | TaskMaster API Reference",
    "keywords": "Namespace TaskMaster.Frequency Classes RunAlways Runs every time it is called RunDaily Runs once daily RunHourly Run hourly RunMonthly Runs a task monthly RunOnce Runs the task one time RunWeekly Runs a trigger weekly RunYearly Runs a task yearly"
  },
  "api/TaskMaster.Frequency.RunAlways.html": {
    "href": "api/TaskMaster.Frequency.RunAlways.html",
    "title": "Class RunAlways | TaskMaster API Reference",
    "keywords": "Class RunAlways Runs every time it is called Inheritance object RunAlways Implements IFrequency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskMaster.Frequency Assembly: TaskMaster.dll Syntax public class RunAlways : IFrequency Methods | Improve this Doc View Source CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. Declaration public bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters Type Name Description LastRunInfo lastRun The last run. DateTime currentTime The current time. Returns Type Description bool True if it can, false otherwise See Also IFrequency Implements IFrequency See Also IFrequency"
  },
  "api/TaskMaster.Frequency.RunDaily.html": {
    "href": "api/TaskMaster.Frequency.RunDaily.html",
    "title": "Class RunDaily | TaskMaster API Reference",
    "keywords": "Class RunDaily Runs once daily Inheritance object RunDaily Implements IFrequency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskMaster.Frequency Assembly: TaskMaster.dll Syntax public class RunDaily : IFrequency Constructors | Improve this Doc View Source RunDaily(int, int) Initializes a new instance of the RunDaily class. Declaration public RunDaily(int hourToRun, int minuteToRun = 0) Parameters Type Name Description int hourToRun The minimum hour to run. int minuteToRun The minute to run. See Also IFrequency Properties | Improve this Doc View Source HourToRun Gets the hour to run. Declaration public int HourToRun { get; } Property Value Type Description int The hour to run. See Also IFrequency | Improve this Doc View Source MinuteToRun Gets or sets the minute to run. Declaration public int MinuteToRun { get; set; } Property Value Type Description int The minute to run. See Also IFrequency Methods | Improve this Doc View Source CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. Declaration public bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters Type Name Description LastRunInfo lastRun The last run. DateTime currentTime The current time. Returns Type Description bool True if it can, false otherwise See Also IFrequency Implements IFrequency See Also IFrequency"
  },
  "api/TaskMaster.Frequency.RunHourly.html": {
    "href": "api/TaskMaster.Frequency.RunHourly.html",
    "title": "Class RunHourly | TaskMaster API Reference",
    "keywords": "Class RunHourly Run hourly Inheritance object RunHourly Implements IFrequency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskMaster.Frequency Assembly: TaskMaster.dll Syntax public class RunHourly : IFrequency Constructors | Improve this Doc View Source RunHourly(int) Initializes a new instance of the RunHourly class. Declaration public RunHourly(int minuteToRun = 0) Parameters Type Name Description int minuteToRun The minute to run. See Also IFrequency Properties | Improve this Doc View Source MinuteToRun Gets or sets the minute to run. Declaration public int MinuteToRun { get; set; } Property Value Type Description int The minute to run. See Also IFrequency Methods | Improve this Doc View Source CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. Declaration public bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters Type Name Description LastRunInfo lastRun The last run. DateTime currentTime The current time. Returns Type Description bool True if it can, false otherwise See Also IFrequency Implements IFrequency See Also IFrequency"
  },
  "api/TaskMaster.Frequency.RunMonthly.html": {
    "href": "api/TaskMaster.Frequency.RunMonthly.html",
    "title": "Class RunMonthly | TaskMaster API Reference",
    "keywords": "Class RunMonthly Runs a task monthly Inheritance object RunMonthly Implements IFrequency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskMaster.Frequency Assembly: TaskMaster.dll Syntax public class RunMonthly : IFrequency Constructors | Improve this Doc View Source RunMonthly(int) Initializes a new instance of the RunMonthly class. Declaration public RunMonthly(int dayOfMonth) Parameters Type Name Description int dayOfMonth The day of month. See Also IFrequency Properties | Improve this Doc View Source DayOfMonth Gets the day of month. Declaration public int DayOfMonth { get; } Property Value Type Description int The day of month. See Also IFrequency Methods | Improve this Doc View Source CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. Declaration public bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters Type Name Description LastRunInfo lastRun The last run. DateTime currentTime The current time. Returns Type Description bool True if it can, false otherwise See Also IFrequency Implements IFrequency See Also IFrequency"
  },
  "api/TaskMaster.Frequency.RunOnce.html": {
    "href": "api/TaskMaster.Frequency.RunOnce.html",
    "title": "Class RunOnce | TaskMaster API Reference",
    "keywords": "Class RunOnce Runs the task one time Inheritance object RunOnce Implements IFrequency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskMaster.Frequency Assembly: TaskMaster.dll Syntax public class RunOnce : IFrequency Methods | Improve this Doc View Source CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. Declaration public bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters Type Name Description LastRunInfo lastRun The last run. DateTime currentTime The current time. Returns Type Description bool True if it can, false otherwise See Also IFrequency Implements IFrequency See Also IFrequency"
  },
  "api/TaskMaster.Frequency.RunWeekly.html": {
    "href": "api/TaskMaster.Frequency.RunWeekly.html",
    "title": "Class RunWeekly | TaskMaster API Reference",
    "keywords": "Class RunWeekly Runs a trigger weekly Inheritance object RunWeekly Implements IFrequency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskMaster.Frequency Assembly: TaskMaster.dll Syntax public class RunWeekly : IFrequency Constructors | Improve this Doc View Source RunWeekly(DayOfWeek) Initializes a new instance of the RunWeekly class. Declaration public RunWeekly(DayOfWeek dayToRun) Parameters Type Name Description DayOfWeek dayToRun The day to run. See Also IFrequency Properties | Improve this Doc View Source DayToRun Gets the day to run. Declaration public DayOfWeek DayToRun { get; } Property Value Type Description DayOfWeek The day to run. See Also IFrequency Methods | Improve this Doc View Source CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. Declaration public bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters Type Name Description LastRunInfo lastRun The last run. DateTime currentTime The current time. Returns Type Description bool True if it can, false otherwise See Also IFrequency Implements IFrequency See Also IFrequency"
  },
  "api/TaskMaster.Frequency.RunYearly.html": {
    "href": "api/TaskMaster.Frequency.RunYearly.html",
    "title": "Class RunYearly | TaskMaster API Reference",
    "keywords": "Class RunYearly Runs a task yearly Inheritance object RunYearly Implements IFrequency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskMaster.Frequency Assembly: TaskMaster.dll Syntax public class RunYearly : IFrequency Constructors | Improve this Doc View Source RunYearly(int) Initializes a new instance of the RunYearly class. Declaration public RunYearly(int dayOfYear) Parameters Type Name Description int dayOfYear The day of year. See Also IFrequency Properties | Improve this Doc View Source DayOfYear Gets the day of month. Declaration public int DayOfYear { get; } Property Value Type Description int The day of month. See Also IFrequency Methods | Improve this Doc View Source CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. Declaration public bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters Type Name Description LastRunInfo lastRun The last run. DateTime currentTime The current time. Returns Type Description bool True if it can, false otherwise See Also IFrequency Implements IFrequency See Also IFrequency"
  },
  "api/TaskMaster.html": {
    "href": "api/TaskMaster.html",
    "title": "Namespace TaskMaster | TaskMaster API Reference",
    "keywords": "Namespace TaskMaster Classes TaskMaster Task master"
  },
  "api/TaskMaster.Interfaces.html": {
    "href": "api/TaskMaster.Interfaces.html",
    "title": "Namespace TaskMaster.Interfaces | TaskMaster API Reference",
    "keywords": "Namespace TaskMaster.Interfaces Interfaces IDataManager Data manager IFrequency Frequency interface ITask Task interface"
  },
  "api/TaskMaster.Interfaces.IDataManager.html": {
    "href": "api/TaskMaster.Interfaces.IDataManager.html",
    "title": "Interface IDataManager | TaskMaster API Reference",
    "keywords": "Interface IDataManager Data manager Namespace: TaskMaster.Interfaces Assembly: TaskMaster.dll Syntax public interface IDataManager Methods | Improve this Doc View Source GetData(ITask) Gets the data. Declaration dynamic? GetData(ITask task) Parameters Type Name Description ITask task The task. Returns Type Description dynamic The data associated with the task | Improve this Doc View Source GetLastRun(ITask) Gets the last run date/time. Declaration LastRunInfo GetLastRun(ITask task) Parameters Type Name Description ITask task The task. Returns Type Description LastRunInfo The last run date/time. | Improve this Doc View Source SetData(ITask, dynamic) Sets the data. Declaration bool SetData(ITask task, dynamic data) Parameters Type Name Description ITask task The task. dynamic data The data. Returns Type Description bool True if it is saved properly, false otherwise. | Improve this Doc View Source SetLastRun(ITask, LastRunInfo) Sets the last run date/time. Declaration bool SetLastRun(ITask task, LastRunInfo runInfo) Parameters Type Name Description ITask task The task. LastRunInfo runInfo The run information. Returns Type Description bool True if it succeeds, false otherwise."
  },
  "api/TaskMaster.Interfaces.IFrequency.html": {
    "href": "api/TaskMaster.Interfaces.IFrequency.html",
    "title": "Interface IFrequency | TaskMaster API Reference",
    "keywords": "Interface IFrequency Frequency interface Namespace: TaskMaster.Interfaces Assembly: TaskMaster.dll Syntax public interface IFrequency Methods | Improve this Doc View Source CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. Declaration bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters Type Name Description LastRunInfo lastRun The last run. DateTime currentTime The current time. Returns Type Description bool True if it can, false otherwise"
  },
  "api/TaskMaster.Interfaces.ITask.html": {
    "href": "api/TaskMaster.Interfaces.ITask.html",
    "title": "Interface ITask | TaskMaster API Reference",
    "keywords": "Interface ITask Task interface Namespace: TaskMaster.Interfaces Assembly: TaskMaster.dll Syntax public interface ITask Properties | Improve this Doc View Source Active Gets a value indicating whether this ITask is active. Declaration bool Active { get; } Property Value Type Description bool true if active; otherwise, false. | Improve this Doc View Source Frequencies Gets the frequencies. Declaration IFrequency[] Frequencies { get; } Property Value Type Description IFrequency[] The frequencies. | Improve this Doc View Source Name Gets the name. Declaration string Name { get; } Property Value Type Description string The name. | Improve this Doc View Source Priority Order to run it in (items with the same Priority value will be run in parallel) Declaration int Priority { get; } Property Value Type Description int Methods | Improve this Doc View Source ExecuteAsync(LastRunInfo) Executes this task Declaration Task<bool> ExecuteAsync(LastRunInfo lastRun) Parameters Type Name Description LastRunInfo lastRun The last run date. Returns Type Description Task<bool> Returns true if it runs successfully, false otherwise | Improve this Doc View Source Initialize(IDataManager) Initializes the task using the specified data manager. Declaration bool Initialize(IDataManager dataManager) Parameters Type Name Description IDataManager dataManager The data manager. Returns Type Description bool True if it initializes correctly, false otherwise."
  },
  "api/TaskMaster.Modules.html": {
    "href": "api/TaskMaster.Modules.html",
    "title": "Namespace TaskMaster.Modules | TaskMaster API Reference",
    "keywords": "Namespace TaskMaster.Modules Classes Module Task master module"
  },
  "api/TaskMaster.Modules.Module.html": {
    "href": "api/TaskMaster.Modules.Module.html",
    "title": "Class Module | TaskMaster API Reference",
    "keywords": "Class Module Task master module Inheritance object Module Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskMaster.Modules Assembly: TaskMaster.dll Syntax public class Module : IModule Properties | Improve this Doc View Source Order Order to run it in Declaration public int Order { get; } Property Value Type Description int See Also IModule Methods | Improve this Doc View Source Load(IServiceCollection?) Loads the module Declaration public void Load(IServiceCollection? bootstrapper) Parameters Type Name Description IServiceCollection bootstrapper Bootstrapper to register with See Also IModule Implements IModule See Also IModule"
  },
  "api/TaskMaster.TaskMaster.html": {
    "href": "api/TaskMaster.TaskMaster.html",
    "title": "Class TaskMaster | TaskMaster API Reference",
    "keywords": "Class TaskMaster Task master Inheritance object TaskMaster Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskMaster Assembly: TaskMaster.dll Syntax public class TaskMaster Constructors | Improve this Doc View Source TaskMaster(ILogger<TaskMaster>?, IEnumerable<ITask>, IEnumerable<IDataManager>, CommandRunner?) Initializes a new instance of the TaskMaster class. Declaration public TaskMaster(ILogger<TaskMaster>? logger, IEnumerable<ITask> tasks, IEnumerable<IDataManager> dataManagers, CommandRunner? commandRunner) Parameters Type Name Description ILogger<TaskMaster> logger The logger. IEnumerable<ITask> tasks The tasks. IEnumerable<IDataManager> dataManagers The data managers. CommandRunner commandRunner The command runner. | Improve this Doc View Source TaskMaster(IEnumerable<ITask>, IEnumerable<IDataManager>, CommandRunner?) Initializes a new instance of the TaskMaster class. Declaration public TaskMaster(IEnumerable<ITask> tasks, IEnumerable<IDataManager> dataManagers, CommandRunner? commandRunner) Parameters Type Name Description IEnumerable<ITask> tasks The tasks. IEnumerable<IDataManager> dataManagers The data managers. CommandRunner commandRunner The command runner. Methods | Improve this Doc View Source Run(params string[]) Runs the tasks. Declaration public bool Run(params string[] args) Parameters Type Name Description string[] args The arguments. Returns Type Description bool True if it runs successfully, false otherwise."
  },
  "api/TaskMaster.Triggers.html": {
    "href": "api/TaskMaster.Triggers.html",
    "title": "Namespace TaskMaster.Triggers | TaskMaster API Reference",
    "keywords": "Namespace TaskMaster.Triggers Classes Trigger Determines when a task is triggered"
  },
  "api/TaskMaster.Triggers.Trigger.html": {
    "href": "api/TaskMaster.Triggers.Trigger.html",
    "title": "Class Trigger | TaskMaster API Reference",
    "keywords": "Class Trigger Determines when a task is triggered Inheritance object Trigger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TaskMaster.Triggers Assembly: TaskMaster.dll Syntax public class Trigger Constructors | Improve this Doc View Source Trigger(ITask, ILogger, IDataManager) Initializes a new instance of the Trigger class. Declaration public Trigger(ITask task, ILogger logger, IDataManager dataManager) Parameters Type Name Description ITask task The task. ILogger logger The logger. IDataManager dataManager The data manager. Exceptions Type Condition ArgumentNullException logger Properties | Improve this Doc View Source Active Gets or sets a value indicating whether this Trigger is active. Declaration public bool Active { get; set; } Property Value Type Description bool true if active; otherwise, false. | Improve this Doc View Source DataManager Gets the data manager. Declaration public IDataManager DataManager { get; } Property Value Type Description IDataManager The data manager. | Improve this Doc View Source Frequencies Gets the frequency. Declaration public IFrequency[] Frequencies { get; } Property Value Type Description IFrequency[] The frequency. | Improve this Doc View Source LastRun Gets the last run. Declaration public LastRunInfo LastRun { get; } Property Value Type Description LastRunInfo The last run. | Improve this Doc View Source Priority Priority to run in. Declaration public int Priority { get; } Property Value Type Description int | Improve this Doc View Source Task Gets the task. Declaration public ITask Task { get; } Property Value Type Description ITask The task. Methods | Improve this Doc View Source RunAsync() Runs this instance. Declaration public Task<bool> RunAsync() Returns Type Description Task<bool> True if it ran successfully, false otherwise"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Program Code | TaskMaster API Reference",
    "keywords": "Program Code using Microsoft.Extensions.DependencyInjection; using System; namespace ExampleApp { internal static class Program { private static void Main(string[] args) { new ServiceCollection().AddCanisterModules().BuildServiceProvider().GetService<TaskMaster.TaskMaster>().Run(args); Console.ReadKey(); } } } Hello Task Code using System; using System.Threading.Tasks; using TaskMaster.Commands; using TaskMaster.Frequency; using TaskMaster.Interfaces; namespace ExampleApp { /// <summary> /// Basic hello world task /// </summary> public class HelloTask : ITask { /// <summary> /// Gets a value indicating whether this <see cref=\"T:TaskMaster.Interfaces.ITask\"/> is active. /// </summary> /// <value><c>true</c> if active; otherwise, <c>false</c>.</value> public bool Active => true; /// <summary> /// Gets the frequencies. /// </summary> /// <value>The frequencies.</value> public IFrequency[] Frequencies => new IFrequency[] { new RunAlways() }; /// <summary> /// Gets the name. /// </summary> /// <value>The name.</value> public string Name => \"Hello\"; /// <summary> /// Order to run it in (items with the same Priority value will be run in parallel) /// </summary> public int Priority => 1; /// <summary> /// Executes the specified last run. /// </summary> /// <param name=\"lastRun\">The last run.</param> /// <returns></returns> public Task<bool> ExecuteAsync(LastRunInfo lastRun) { Console.Write(\"Hello\"); return Task.FromResult(true); } /// <summary> /// Initializes the specified data manager. /// </summary> /// <param name=\"dataManager\">The data manager.</param> /// <returns></returns> public bool Initialize(IDataManager dataManager) { return true; } } } World Task Code using System; using System.Threading.Tasks; using TaskMaster.Commands; using TaskMaster.Frequency; using TaskMaster.Interfaces; namespace ExampleApp { /// <summary> /// Basic hello world task /// </summary> public class WorldTask : ITask { /// <summary> /// Gets a value indicating whether this <see cref=\"T:TaskMaster.Interfaces.ITask\"/> is active. /// </summary> /// <value><c>true</c> if active; otherwise, <c>false</c>.</value> public bool Active => true; /// <summary> /// Gets the frequencies. /// </summary> /// <value>The frequencies.</value> public IFrequency[] Frequencies => new IFrequency[] { new RunAlways() }; /// <summary> /// Gets the name. /// </summary> /// <value>The name.</value> public string Name => \"World\"; /// <summary> /// Order to run it in (items with the same Priority value will be run in parallel) /// </summary> public int Priority => 2; /// <summary> /// Executes the specified last run. /// </summary> /// <param name=\"lastRun\">The last run.</param> /// <returns></returns> public Task<bool> ExecuteAsync(LastRunInfo lastRun) { Console.Write(\"World\"); return Task.FromResult(true); } /// <summary> /// Initializes the specified data manager. /// </summary> /// <param name=\"dataManager\">The data manager.</param> /// <returns></returns> public bool Initialize(IDataManager dataManager) { return true; } } } Output HelloWorld"
  },
  "index.html": {
    "href": "index.html",
    "title": "TaskMaster | TaskMaster API Reference",
    "keywords": "TaskMaster TaskMaster is a basic library to help with running tasks only after certain criteria are met. Basic Usage The system relies on an IoC wrapper called Canister. While Canister has a built in IoC container, it's purpose is to actually wrap your container of choice in a way that simplifies setup and usage for other libraries that don't want to be tied to a specific IoC container. TaskMaster uses it to detect and pull in various info. As such you must set up Canister in order to use TaskMaster: Canister.Builder.CreateContainer(new List<ServiceDescriptor>()) .RegisterTaskMaster() .Build(); You must also register any assemblies that will contain your tasks with Canister in order for the system to find them: Canister.Builder.CreateContainer(new List<ServiceDescriptor>()) .AddAssembly(typeof(MyTask).GetTypeInfo().Assembly) .RegisterTaskMaster() .Build(); This is required prior to using the TaskMaster class for the first time. Once Canister is set up, you can use the TaskMaster class: var Manager = new TaskMaster.TaskMaster(); Manager.Run(); The TaskMaster class will handle discovery of tasks, prioritization, and running of tasks. It will also log any errors that it finds to Serilog. If Serilog is not registered to Canister, it will default to an empty logger that does nothing. However if one is specified it will log events as they occur to the ILogger class. Creating a task Creating a task is rather simple, you just need to inherit a class from ITask: /// <summary> /// Basic hello world task /// </summary> public class HelloWorldTask : ITask { /// <summary> /// Gets the frequencies. /// </summary> /// <value>The frequencies.</value> public IFrequency[] Frequencies => new IFrequency[] { new RunAlways() }; /// <summary> /// Gets the name. /// </summary> /// <value>The name.</value> public string Name => \"Hello World\"; /// <summary> /// Order to run it in (items with the same Priority value will be run in parallel) /// </summary> public int Priority => 1; /// <summary> /// Executes the specified last run. /// </summary> /// <param name=\"lastRun\">The last run.</param> /// <returns></returns> public bool Execute(DateTime lastRun) { Console.WriteLine(\"Hello World\"); return true; } /// <summary> /// Initializes the specified data manager. /// </summary> /// <param name=\"dataManager\">The data manager.</param> /// <returns></returns> public bool Initialize(IDataManager dataManager) { return true; } } The above task runs every time the TaskManager's Run method is called. However you can specify another or even multiple frequencies at which to run. The name of the task is Hello World. As such all logged events will use that name. The priority is set to 1, which determines the batch they are run in. Lower numbered items are run first and if more than one task has the same priority, they will be run at the same time in parallel. The Initialization function is called when the item is created. The function is passed in an IDataManager class that will handle saving/getting configuration data for the task. By default the data manager saves configuration data in json serialized strings but this can be changed by creating your own data manager. The Execute function is called when the task is actually triggered. As such that is where your task's actual work should go. Installation The library is available via Nuget with the package name \"TaskMaster\". To install it run the following command in the Package Manager Console: Install-Package TaskMaster Build Process In order to build the library you will require the following as a minimum: Visual Studio 2017 Other than that, just clone the project and you should be able to load the solution and build without too much effort."
  }
}