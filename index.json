{
  "api/Microsoft.Extensions.DependencyInjection.RegistrationTaskMaster.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.RegistrationTaskMaster.html",
    "title": "Class RegistrationTaskMaster | TaskMaster API Reference",
    "summary": "Class RegistrationTaskMaster Namespace Microsoft.Extensions.DependencyInjection Assembly TaskMaster.dll Registration extension methods public static class RegistrationTaskMaster Inheritance object RegistrationTaskMaster Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterTaskMaster(ICanisterConfiguration?) Registers the library with the bootstrapper. public static ICanisterConfiguration? RegisterTaskMaster(this ICanisterConfiguration? bootstrapper) Parameters bootstrapper ICanisterConfiguration The bootstrapper. Returns ICanisterConfiguration The bootstrapper RegisterTaskMaster(IServiceCollection?) Registers the TaskMaster services with the specified service collection. public static IServiceCollection? RegisterTaskMaster(this IServiceCollection? services) Parameters services IServiceCollection The service collection to add the services to. Returns IServiceCollection The service collection with the TaskMaster services added."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | TaskMaster API Reference",
    "summary": "Namespace Microsoft.Extensions.DependencyInjection Classes RegistrationTaskMaster Registration extension methods"
  },
  "api/TaskMaster.Commands.LastRunInfo.html": {
    "href": "api/TaskMaster.Commands.LastRunInfo.html",
    "title": "Struct LastRunInfo | TaskMaster API Reference",
    "summary": "Struct LastRunInfo Namespace TaskMaster.Commands Assembly TaskMaster.dll Last run info public struct LastRunInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties LastRunEnd Gets or sets the last run end. public DateTime LastRunEnd { readonly get; set; } Property Value DateTime The last run end. LastRunStart Gets or sets the last run start. public DateTime LastRunStart { readonly get; set; } Property Value DateTime The last run start. MinValue Gets the minimum value. public static LastRunInfo MinValue { get; } Property Value LastRunInfo The minimum value."
  },
  "api/TaskMaster.Commands.RunTask.html": {
    "href": "api/TaskMaster.Commands.RunTask.html",
    "title": "Class RunTask | TaskMaster API Reference",
    "summary": "Class RunTask Namespace TaskMaster.Commands Assembly TaskMaster.dll Runs a specific task public class RunTask : CommandBaseClass<TaskName>, ICommand<TaskName>, ICommand Inheritance object CommandBaseClass<TaskName> RunTask Implements ICommand<TaskName> ICommand Inherited Members CommandBaseClass<TaskName>.CanRun(string) CommandBaseClass<TaskName>.CreateInput() CommandBaseClass<TaskName>.Run(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aliases Gets the aliases. public override string[] Aliases { get; } Property Value string[] The aliases. Description Gets the description. public override string Description { get; } Property Value string The description. Name Gets the name. public override string Name { get; } Property Value string The name. Methods Run(TaskName) Runs the specified input. protected override Task<int> Run(TaskName input) Parameters input TaskName The input. Returns Task<int> The result. See Also CommandBaseClass<TInput>"
  },
  "api/TaskMaster.Commands.TaskListing.html": {
    "href": "api/TaskMaster.Commands.TaskListing.html",
    "title": "Class TaskListing | TaskMaster API Reference",
    "summary": "Class TaskListing Namespace TaskMaster.Commands Assembly TaskMaster.dll Task listing public class TaskListing Inheritance object TaskListing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods ToString() Converts to string. public override string ToString() Returns string A string that represents this instance."
  },
  "api/TaskMaster.Commands.TaskName.html": {
    "href": "api/TaskMaster.Commands.TaskName.html",
    "title": "Class TaskName | TaskMaster API Reference",
    "summary": "Class TaskName Namespace TaskMaster.Commands Assembly TaskMaster.dll Task name input public class TaskName Inheritance object TaskName Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name. [DynamicDisplay(typeof(TaskListing))] public string? Name { get; set; } Property Value string The name."
  },
  "api/TaskMaster.Commands.html": {
    "href": "api/TaskMaster.Commands.html",
    "title": "Namespace TaskMaster.Commands | TaskMaster API Reference",
    "summary": "Namespace TaskMaster.Commands Classes RunTask Runs a specific task TaskListing Task listing TaskName Task name input Structs LastRunInfo Last run info"
  },
  "api/TaskMaster.DataManager.DefaultDataManager.html": {
    "href": "api/TaskMaster.DataManager.DefaultDataManager.html",
    "title": "Class DefaultDataManager | TaskMaster API Reference",
    "summary": "Class DefaultDataManager Namespace TaskMaster.DataManager Assembly TaskMaster.dll Default data manager public class DefaultDataManager : SimpleFileStore, IDataManager Inheritance object SimpleFileStore DefaultDataManager Implements IDataManager Inherited Members SimpleFileStore.Location SimpleFileStore.SerialBox SimpleFileStore.GetData(ITask) SimpleFileStore.GetLastRun(ITask) SimpleFileStore.SetData(ITask, dynamic) SimpleFileStore.SetLastRun(ITask, LastRunInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultDataManager(SerialBox) Initializes a new instance of the DefaultDataManager class. public DefaultDataManager(SerialBox serialBox) Parameters serialBox SerialBox The serial box. See Also SimpleFileStore"
  },
  "api/TaskMaster.DataManager.SimpleFileStore.html": {
    "href": "api/TaskMaster.DataManager.SimpleFileStore.html",
    "title": "Class SimpleFileStore | TaskMaster API Reference",
    "summary": "Class SimpleFileStore Namespace TaskMaster.DataManager Assembly TaskMaster.dll Simple file store. public abstract class SimpleFileStore : IDataManager Inheritance object SimpleFileStore Implements IDataManager Derived DefaultDataManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SimpleFileStore(string, SerialBox) Initializes a new instance of the SimpleFileStore class. protected SimpleFileStore(string location, SerialBox serialBox) Parameters location string The location to save to. serialBox SerialBox The serial box. Properties Location Gets the location. public string Location { get; } Property Value string The location. SerialBox Gets the serial box. public SerialBox SerialBox { get; } Property Value SerialBox The serial box. Methods GetData(ITask) Gets the data. public dynamic? GetData(ITask task) Parameters task ITask The task. Returns dynamic The data associated with the task GetLastRun(ITask) Gets the last run date/time. public LastRunInfo GetLastRun(ITask task) Parameters task ITask The task. Returns LastRunInfo The last run date/time. SetData(ITask, dynamic) Sets the data. public bool SetData(ITask task, dynamic data) Parameters task ITask The task. data dynamic The data. Returns bool True if it is saved properly, false otherwise. SetLastRun(ITask, LastRunInfo) Sets the last run date/time. public bool SetLastRun(ITask task, LastRunInfo time) Parameters task ITask The task. time LastRunInfo The last run date/time. Returns bool True if it succeeds, false otherwise. See Also IDataManager"
  },
  "api/TaskMaster.DataManager.html": {
    "href": "api/TaskMaster.DataManager.html",
    "title": "Namespace TaskMaster.DataManager | TaskMaster API Reference",
    "summary": "Namespace TaskMaster.DataManager Classes DefaultDataManager Default data manager SimpleFileStore Simple file store."
  },
  "api/TaskMaster.Frequency.RunAlways.html": {
    "href": "api/TaskMaster.Frequency.RunAlways.html",
    "title": "Class RunAlways | TaskMaster API Reference",
    "summary": "Class RunAlways Namespace TaskMaster.Frequency Assembly TaskMaster.dll Runs every time it is called public class RunAlways : IFrequency Inheritance object RunAlways Implements IFrequency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. public bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters lastRun LastRunInfo The last run. currentTime DateTime The current time. Returns bool True if it can, false otherwise See Also IFrequency"
  },
  "api/TaskMaster.Frequency.RunDaily.html": {
    "href": "api/TaskMaster.Frequency.RunDaily.html",
    "title": "Class RunDaily | TaskMaster API Reference",
    "summary": "Class RunDaily Namespace TaskMaster.Frequency Assembly TaskMaster.dll Runs once daily public class RunDaily : IFrequency Inheritance object RunDaily Implements IFrequency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RunDaily(int, int) Initializes a new instance of the RunDaily class. public RunDaily(int hourToRun, int minuteToRun = 0) Parameters hourToRun int The minimum hour to run. minuteToRun int The minute to run. Properties HourToRun Gets the hour to run. public int HourToRun { get; } Property Value int The hour to run. MinuteToRun Gets or sets the minute to run. public int MinuteToRun { get; set; } Property Value int The minute to run. Methods CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. public bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters lastRun LastRunInfo The last run. currentTime DateTime The current time. Returns bool True if it can, false otherwise See Also IFrequency"
  },
  "api/TaskMaster.Frequency.RunHourly.html": {
    "href": "api/TaskMaster.Frequency.RunHourly.html",
    "title": "Class RunHourly | TaskMaster API Reference",
    "summary": "Class RunHourly Namespace TaskMaster.Frequency Assembly TaskMaster.dll Run hourly public class RunHourly : IFrequency Inheritance object RunHourly Implements IFrequency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RunHourly(int) Initializes a new instance of the RunHourly class. public RunHourly(int minuteToRun = 0) Parameters minuteToRun int The minute to run. Properties MinuteToRun Gets or sets the minute to run. public int MinuteToRun { get; set; } Property Value int The minute to run. Methods CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. public bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters lastRun LastRunInfo The last run. currentTime DateTime The current time. Returns bool True if it can, false otherwise See Also IFrequency"
  },
  "api/TaskMaster.Frequency.RunMonthly.html": {
    "href": "api/TaskMaster.Frequency.RunMonthly.html",
    "title": "Class RunMonthly | TaskMaster API Reference",
    "summary": "Class RunMonthly Namespace TaskMaster.Frequency Assembly TaskMaster.dll Runs a task monthly public class RunMonthly : IFrequency Inheritance object RunMonthly Implements IFrequency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RunMonthly(int) Initializes a new instance of the RunMonthly class. public RunMonthly(int dayOfMonth) Parameters dayOfMonth int The day of month. Properties DayOfMonth Gets the day of month. public int DayOfMonth { get; } Property Value int The day of month. Methods CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. public bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters lastRun LastRunInfo The last run. currentTime DateTime The current time. Returns bool True if it can, false otherwise See Also IFrequency"
  },
  "api/TaskMaster.Frequency.RunOnce.html": {
    "href": "api/TaskMaster.Frequency.RunOnce.html",
    "title": "Class RunOnce | TaskMaster API Reference",
    "summary": "Class RunOnce Namespace TaskMaster.Frequency Assembly TaskMaster.dll Runs the task one time public class RunOnce : IFrequency Inheritance object RunOnce Implements IFrequency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. public bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters lastRun LastRunInfo The last run. currentTime DateTime The current time. Returns bool True if it can, false otherwise See Also IFrequency"
  },
  "api/TaskMaster.Frequency.RunWeekly.html": {
    "href": "api/TaskMaster.Frequency.RunWeekly.html",
    "title": "Class RunWeekly | TaskMaster API Reference",
    "summary": "Class RunWeekly Namespace TaskMaster.Frequency Assembly TaskMaster.dll Runs a trigger weekly public class RunWeekly : IFrequency Inheritance object RunWeekly Implements IFrequency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RunWeekly(DayOfWeek) Initializes a new instance of the RunWeekly class. public RunWeekly(DayOfWeek dayToRun) Parameters dayToRun DayOfWeek The day to run. Properties DayToRun Gets the day to run. public DayOfWeek DayToRun { get; } Property Value DayOfWeek The day to run. Methods CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. public bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters lastRun LastRunInfo The last run. currentTime DateTime The current time. Returns bool True if it can, false otherwise See Also IFrequency"
  },
  "api/TaskMaster.Frequency.RunYearly.html": {
    "href": "api/TaskMaster.Frequency.RunYearly.html",
    "title": "Class RunYearly | TaskMaster API Reference",
    "summary": "Class RunYearly Namespace TaskMaster.Frequency Assembly TaskMaster.dll Runs a task yearly public class RunYearly : IFrequency Inheritance object RunYearly Implements IFrequency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RunYearly(int) Initializes a new instance of the RunYearly class. public RunYearly(int dayOfYear) Parameters dayOfYear int The day of year. Properties DayOfYear Gets the day of month. public int DayOfYear { get; } Property Value int The day of month. Methods CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. public bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters lastRun LastRunInfo The last run. currentTime DateTime The current time. Returns bool True if it can, false otherwise See Also IFrequency"
  },
  "api/TaskMaster.Frequency.html": {
    "href": "api/TaskMaster.Frequency.html",
    "title": "Namespace TaskMaster.Frequency | TaskMaster API Reference",
    "summary": "Namespace TaskMaster.Frequency Classes RunAlways Runs every time it is called RunDaily Runs once daily RunHourly Run hourly RunMonthly Runs a task monthly RunOnce Runs the task one time RunWeekly Runs a trigger weekly RunYearly Runs a task yearly"
  },
  "api/TaskMaster.Interfaces.IDataManager.html": {
    "href": "api/TaskMaster.Interfaces.IDataManager.html",
    "title": "Interface IDataManager | TaskMaster API Reference",
    "summary": "Interface IDataManager Namespace TaskMaster.Interfaces Assembly TaskMaster.dll Data manager public interface IDataManager Methods GetData(ITask) Gets the data. dynamic? GetData(ITask task) Parameters task ITask The task. Returns dynamic The data associated with the task GetLastRun(ITask) Gets the last run date/time. LastRunInfo GetLastRun(ITask task) Parameters task ITask The task. Returns LastRunInfo The last run date/time. SetData(ITask, dynamic) Sets the data. bool SetData(ITask task, dynamic data) Parameters task ITask The task. data dynamic The data. Returns bool True if it is saved properly, false otherwise. SetLastRun(ITask, LastRunInfo) Sets the last run date/time. bool SetLastRun(ITask task, LastRunInfo runInfo) Parameters task ITask The task. runInfo LastRunInfo The run information. Returns bool True if it succeeds, false otherwise."
  },
  "api/TaskMaster.Interfaces.IFrequency.html": {
    "href": "api/TaskMaster.Interfaces.IFrequency.html",
    "title": "Interface IFrequency | TaskMaster API Reference",
    "summary": "Interface IFrequency Namespace TaskMaster.Interfaces Assembly TaskMaster.dll Frequency interface public interface IFrequency Methods CanRun(LastRunInfo, DateTime) Determines whether this instance can run based on the specified last run. bool CanRun(LastRunInfo lastRun, DateTime currentTime) Parameters lastRun LastRunInfo The last run. currentTime DateTime The current time. Returns bool True if it can, false otherwise"
  },
  "api/TaskMaster.Interfaces.ITask.html": {
    "href": "api/TaskMaster.Interfaces.ITask.html",
    "title": "Interface ITask | TaskMaster API Reference",
    "summary": "Interface ITask Namespace TaskMaster.Interfaces Assembly TaskMaster.dll Task interface public interface ITask Properties Active Gets a value indicating whether this ITask is active. bool Active { get; } Property Value bool true if active; otherwise, false. Frequencies Gets the frequencies. IFrequency[] Frequencies { get; } Property Value IFrequency[] The frequencies. Name Gets the name. string Name { get; } Property Value string The name. Priority Order to run it in (items with the same Priority value will be run in parallel) int Priority { get; } Property Value int Methods ExecuteAsync(LastRunInfo) Executes this task Task<bool> ExecuteAsync(LastRunInfo lastRun) Parameters lastRun LastRunInfo The last run date. Returns Task<bool> Returns true if it runs successfully, false otherwise Initialize(IDataManager) Initializes the task using the specified data manager. bool Initialize(IDataManager dataManager) Parameters dataManager IDataManager The data manager. Returns bool True if it initializes correctly, false otherwise."
  },
  "api/TaskMaster.Interfaces.html": {
    "href": "api/TaskMaster.Interfaces.html",
    "title": "Namespace TaskMaster.Interfaces | TaskMaster API Reference",
    "summary": "Namespace TaskMaster.Interfaces Interfaces IDataManager Data manager IFrequency Frequency interface ITask Task interface"
  },
  "api/TaskMaster.Modules.Module.html": {
    "href": "api/TaskMaster.Modules.Module.html",
    "title": "Class Module | TaskMaster API Reference",
    "summary": "Class Module Namespace TaskMaster.Modules Assembly TaskMaster.dll Task master module public class Module : IModule Inheritance object Module Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Order to run it in public int Order { get; } Property Value int Methods Load(IServiceCollection?) Loads the module public void Load(IServiceCollection? bootstrapper) Parameters bootstrapper IServiceCollection Bootstrapper to register with See Also IModule"
  },
  "api/TaskMaster.Modules.html": {
    "href": "api/TaskMaster.Modules.html",
    "title": "Namespace TaskMaster.Modules | TaskMaster API Reference",
    "summary": "Namespace TaskMaster.Modules Classes Module Task master module"
  },
  "api/TaskMaster.TaskMaster.html": {
    "href": "api/TaskMaster.TaskMaster.html",
    "title": "Class TaskMaster | TaskMaster API Reference",
    "summary": "Class TaskMaster Namespace TaskMaster Assembly TaskMaster.dll Task master public class TaskMaster Inheritance object TaskMaster Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskMaster(ILogger<TaskMaster>?, IEnumerable<ITask>, IEnumerable<IDataManager>, CommandRunner?) Initializes a new instance of the TaskMaster class. public TaskMaster(ILogger<TaskMaster>? logger, IEnumerable<ITask> tasks, IEnumerable<IDataManager> dataManagers, CommandRunner? commandRunner) Parameters logger ILogger<TaskMaster> The logger. tasks IEnumerable<ITask> The tasks. dataManagers IEnumerable<IDataManager> The data managers. commandRunner CommandRunner The command runner. TaskMaster(IEnumerable<ITask>, IEnumerable<IDataManager>, CommandRunner?) Initializes a new instance of the TaskMaster class. public TaskMaster(IEnumerable<ITask> tasks, IEnumerable<IDataManager> dataManagers, CommandRunner? commandRunner) Parameters tasks IEnumerable<ITask> The tasks. dataManagers IEnumerable<IDataManager> The data managers. commandRunner CommandRunner The command runner. Methods Run(params string[]) Runs the tasks. public bool Run(params string[] args) Parameters args string[] The arguments. Returns bool True if it runs successfully, false otherwise."
  },
  "api/TaskMaster.Triggers.Trigger.html": {
    "href": "api/TaskMaster.Triggers.Trigger.html",
    "title": "Class Trigger | TaskMaster API Reference",
    "summary": "Class Trigger Namespace TaskMaster.Triggers Assembly TaskMaster.dll Determines when a task is triggered public class Trigger Inheritance object Trigger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Trigger(ITask, ILogger, IDataManager) Initializes a new instance of the Trigger class. public Trigger(ITask task, ILogger logger, IDataManager dataManager) Parameters task ITask The task. logger ILogger The logger. dataManager IDataManager The data manager. Exceptions ArgumentNullException logger Properties Active Gets or sets a value indicating whether this Trigger is active. public bool Active { get; set; } Property Value bool true if active; otherwise, false. DataManager Gets the data manager. public IDataManager DataManager { get; } Property Value IDataManager The data manager. Frequencies Gets the frequency. public IFrequency[] Frequencies { get; } Property Value IFrequency[] The frequency. LastRun Gets the last run. public LastRunInfo LastRun { get; } Property Value LastRunInfo The last run. Priority Priority to run in. public int Priority { get; } Property Value int Task Gets the task. public ITask Task { get; } Property Value ITask The task. Methods RunAsync() Runs this instance. public Task<bool> RunAsync() Returns Task<bool> True if it ran successfully, false otherwise"
  },
  "api/TaskMaster.Triggers.html": {
    "href": "api/TaskMaster.Triggers.html",
    "title": "Namespace TaskMaster.Triggers | TaskMaster API Reference",
    "summary": "Namespace TaskMaster.Triggers Classes Trigger Determines when a task is triggered"
  },
  "api/TaskMaster.html": {
    "href": "api/TaskMaster.html",
    "title": "Namespace TaskMaster | TaskMaster API Reference",
    "summary": "Namespace TaskMaster Classes TaskMaster Task master"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | TaskMaster API Reference",
    "summary": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Program Code | TaskMaster API Reference",
    "summary": "Program Code using Microsoft.Extensions.DependencyInjection; using System; namespace ExampleApp { internal static class Program { private static void Main(string[] args) { new ServiceCollection().AddCanisterModules().BuildServiceProvider().GetService<TaskMaster.TaskMaster>().Run(args); Console.ReadKey(); } } } Hello Task Code using System; using System.Threading.Tasks; using TaskMaster.Commands; using TaskMaster.Frequency; using TaskMaster.Interfaces; namespace ExampleApp { /// <summary> /// Basic hello world task /// </summary> public class HelloTask : ITask { /// <summary> /// Gets a value indicating whether this <see cref=\"T:TaskMaster.Interfaces.ITask\"/> is active. /// </summary> /// <value><c>true</c> if active; otherwise, <c>false</c>.</value> public bool Active => true; /// <summary> /// Gets the frequencies. /// </summary> /// <value>The frequencies.</value> public IFrequency[] Frequencies => new IFrequency[] { new RunAlways() }; /// <summary> /// Gets the name. /// </summary> /// <value>The name.</value> public string Name => \"Hello\"; /// <summary> /// Order to run it in (items with the same Priority value will be run in parallel) /// </summary> public int Priority => 1; /// <summary> /// Executes the specified last run. /// </summary> /// <param name=\"lastRun\">The last run.</param> /// <returns></returns> public Task<bool> ExecuteAsync(LastRunInfo lastRun) { Console.Write(\"Hello\"); return Task.FromResult(true); } /// <summary> /// Initializes the specified data manager. /// </summary> /// <param name=\"dataManager\">The data manager.</param> /// <returns></returns> public bool Initialize(IDataManager dataManager) { return true; } } } World Task Code using System; using System.Threading.Tasks; using TaskMaster.Commands; using TaskMaster.Frequency; using TaskMaster.Interfaces; namespace ExampleApp { /// <summary> /// Basic hello world task /// </summary> public class WorldTask : ITask { /// <summary> /// Gets a value indicating whether this <see cref=\"T:TaskMaster.Interfaces.ITask\"/> is active. /// </summary> /// <value><c>true</c> if active; otherwise, <c>false</c>.</value> public bool Active => true; /// <summary> /// Gets the frequencies. /// </summary> /// <value>The frequencies.</value> public IFrequency[] Frequencies => new IFrequency[] { new RunAlways() }; /// <summary> /// Gets the name. /// </summary> /// <value>The name.</value> public string Name => \"World\"; /// <summary> /// Order to run it in (items with the same Priority value will be run in parallel) /// </summary> public int Priority => 2; /// <summary> /// Executes the specified last run. /// </summary> /// <param name=\"lastRun\">The last run.</param> /// <returns></returns> public Task<bool> ExecuteAsync(LastRunInfo lastRun) { Console.Write(\"World\"); return Task.FromResult(true); } /// <summary> /// Initializes the specified data manager. /// </summary> /// <param name=\"dataManager\">The data manager.</param> /// <returns></returns> public bool Initialize(IDataManager dataManager) { return true; } } } Output HelloWorld"
  },
  "index.html": {
    "href": "index.html",
    "title": "TaskMaster | TaskMaster API Reference",
    "summary": "TaskMaster TaskMaster is a lightweight C# library that provides functionality for running tasks based on specific criteria. It simplifies the process of setting up and executing tasks in your application. Basic Usage In order to use TaskMaster, you must wire it up first by adding it to your ServiceCollection: serviceCollection.RegisterTaskMaster(); Or if you are using Canister, you can use the following code: serviceCollection.AddCanisterModules(); Once it is configured, you can create a new instance of the TaskMaster service: var Runner = services.GetService<TaskMaster>(); Runner.Run(args); The TaskMaster class handles task discovery, prioritization, and execution. It also logs any errors it encounters using Serilog. If Serilog is not registered with Canister, a default empty logger will be used. However, if a logger is specified, events will be logged using the ILogger class. Creating a Task Creating a task with TaskMaster is straightforward. Simply inherit from the ITask interface and implement its methods. Here's an example of a basic \"Hello World\" task: /// <summary> /// Basic hello world task /// </summary> public class HelloWorldTask : ITask { public IFrequency[] Frequencies => new IFrequency[] { new RunAlways() }; public string Name => \"Hello World\"; public int Priority => 1; public bool Execute(DateTime lastRun) { Console.WriteLine(\"Hello World\"); return true; } public bool Initialize(IDataManager dataManager) { return true; } } In this example, the task runs every time the Run method of the TaskMaster is called. However, you can specify different frequencies for execution. The task's name is \"Hello World,\" which is used for logging purposes. The priority is set to 1, determining the execution order. Tasks with lower priority values are executed first, and tasks with the same priority may run in parallel. The Initialize method is called when the task is created and receives an IDataManager instance, which handles saving and retrieving configuration data for the task. By default, the data manager saves configuration data as JSON-serialized strings, but you can implement your own data manager for customization. The Execute method is where the actual work of the task should be performed. Installation TaskMaster is available as a NuGet package. You can install it by running the following command in the Package Manager Console: Install-Package TaskMaster Build Process To build the library, ensure you have the following minimum requirements: Visual Studio 2022 Clone the project repository, and you should be able to load the solution in Visual Studio and build it without any issues. For any further assistance or information, please refer to the project documentation or reach out to the project contributors. Enjoy using TaskMaster in your applications!"
  }
}